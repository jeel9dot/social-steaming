// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: social-stream.proto

package social_stream

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SocialSteamService_PublishTrades_FullMethodName  = "/SocialSteamService/PublishTrades"
	SocialSteamService_SubcribeTrades_FullMethodName = "/SocialSteamService/SubcribeTrades"
)

// SocialSteamServiceClient is the client API for SocialSteamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SocialSteamServiceClient interface {
	PublishTrades(ctx context.Context, in *PublisherRequest, opts ...grpc.CallOption) (*PublisherResponce, error)
	SubcribeTrades(ctx context.Context, in *SubcribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubcribeResponce], error)
}

type socialSteamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSocialSteamServiceClient(cc grpc.ClientConnInterface) SocialSteamServiceClient {
	return &socialSteamServiceClient{cc}
}

func (c *socialSteamServiceClient) PublishTrades(ctx context.Context, in *PublisherRequest, opts ...grpc.CallOption) (*PublisherResponce, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublisherResponce)
	err := c.cc.Invoke(ctx, SocialSteamService_PublishTrades_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialSteamServiceClient) SubcribeTrades(ctx context.Context, in *SubcribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubcribeResponce], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SocialSteamService_ServiceDesc.Streams[0], SocialSteamService_SubcribeTrades_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubcribeRequest, SubcribeResponce]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SocialSteamService_SubcribeTradesClient = grpc.ServerStreamingClient[SubcribeResponce]

// SocialSteamServiceServer is the server API for SocialSteamService service.
// All implementations must embed UnimplementedSocialSteamServiceServer
// for forward compatibility.
type SocialSteamServiceServer interface {
	PublishTrades(context.Context, *PublisherRequest) (*PublisherResponce, error)
	SubcribeTrades(*SubcribeRequest, grpc.ServerStreamingServer[SubcribeResponce]) error
	mustEmbedUnimplementedSocialSteamServiceServer()
}

// UnimplementedSocialSteamServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSocialSteamServiceServer struct{}

func (UnimplementedSocialSteamServiceServer) PublishTrades(context.Context, *PublisherRequest) (*PublisherResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishTrades not implemented")
}
func (UnimplementedSocialSteamServiceServer) SubcribeTrades(*SubcribeRequest, grpc.ServerStreamingServer[SubcribeResponce]) error {
	return status.Errorf(codes.Unimplemented, "method SubcribeTrades not implemented")
}
func (UnimplementedSocialSteamServiceServer) mustEmbedUnimplementedSocialSteamServiceServer() {}
func (UnimplementedSocialSteamServiceServer) testEmbeddedByValue()                            {}

// UnsafeSocialSteamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SocialSteamServiceServer will
// result in compilation errors.
type UnsafeSocialSteamServiceServer interface {
	mustEmbedUnimplementedSocialSteamServiceServer()
}

func RegisterSocialSteamServiceServer(s grpc.ServiceRegistrar, srv SocialSteamServiceServer) {
	// If the following call pancis, it indicates UnimplementedSocialSteamServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SocialSteamService_ServiceDesc, srv)
}

func _SocialSteamService_PublishTrades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublisherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialSteamServiceServer).PublishTrades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialSteamService_PublishTrades_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialSteamServiceServer).PublishTrades(ctx, req.(*PublisherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialSteamService_SubcribeTrades_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubcribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SocialSteamServiceServer).SubcribeTrades(m, &grpc.GenericServerStream[SubcribeRequest, SubcribeResponce]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SocialSteamService_SubcribeTradesServer = grpc.ServerStreamingServer[SubcribeResponce]

// SocialSteamService_ServiceDesc is the grpc.ServiceDesc for SocialSteamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SocialSteamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SocialSteamService",
	HandlerType: (*SocialSteamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishTrades",
			Handler:    _SocialSteamService_PublishTrades_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubcribeTrades",
			Handler:       _SocialSteamService_SubcribeTrades_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "social-stream.proto",
}
